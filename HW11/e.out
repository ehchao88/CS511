============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 88339 was started by ericchao on Johns-MacBook-Pro.local,
Mon Nov 30 12:42:50 2020
The command was "/Users/ericchao/LADR-2009-11A/bin/./prover9".
============================== end of head ===========================

============================== INPUT =================================

formulas(assumptions).
poset(x,x).
poset(x,y) & poset(y,x) -> x = y.
poset(x,y) & poset(y,z) -> poset(x,z).
poset(B,x).
poset(x,T).
poset(pl(x,y),z) <-> poset(x,z) & poset(y,z).
poset(z,mu(x,y)) <-> poset(z,x) & poset(z,y).
mu(x,pl(y,z)) = pl(mu(x,y),mu(x,z)).
pl(x,mu(y,z)) = mu(pl(x,y),pl(x,z)).
end_of_list.

formulas(goals).
(all x all y y = -x) -> (all z (z = -x <-> z = y)).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 poset(x,y) & poset(y,x) -> x = y # label(non_clause).  [assumption].
2 poset(x,y) & poset(y,z) -> poset(x,z) # label(non_clause).  [assumption].
3 poset(pl(x,y),z) <-> poset(x,z) & poset(y,z) # label(non_clause).  [assumption].
4 poset(z,mu(x,y)) <-> poset(z,x) & poset(z,y) # label(non_clause).  [assumption].
5 (all x all y y = -x) -> (all z (z = -x <-> z = y)) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
poset(x,x).  [assumption].
-poset(x,y) | -poset(y,x) | y = x.  [clausify(1)].
-poset(x,y) | -poset(y,z) | poset(x,z).  [clausify(2)].
poset(B,x).  [assumption].
poset(x,T).  [assumption].
-poset(pl(x,y),z) | poset(x,z).  [clausify(3)].
-poset(pl(x,y),z) | poset(y,z).  [clausify(3)].
poset(pl(x,y),z) | -poset(x,z) | -poset(y,z).  [clausify(3)].
-poset(x,mu(y,z)) | poset(x,y).  [clausify(4)].
-poset(x,mu(y,z)) | poset(x,z).  [clausify(4)].
poset(x,mu(y,z)) | -poset(x,y) | -poset(x,z).  [clausify(4)].
mu(x,pl(y,z)) = pl(mu(x,y),mu(x,z)).  [assumption].
pl(x,mu(y,z)) = mu(pl(x,y),pl(x,z)).  [assumption].
-x = y.  [deny(5)].
-c1 = c3 | c3 = c2.  [deny(5)].
-c1 != c3 | c3 != c2.  [deny(5)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

No predicates eliminated.

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, poset ]).
Function symbol precedence:  function_order([ B, T, c1, c2, c3, mu, pl, - ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      6 poset(x,x).  [assumption].
kept:      7 -poset(x,y) | -poset(y,x) | y = x.  [clausify(1)].
kept:      8 -poset(x,y) | -poset(y,z) | poset(x,z).  [clausify(2)].
kept:      9 poset(B,x).  [assumption].
kept:      10 poset(x,T).  [assumption].
kept:      11 -poset(pl(x,y),z) | poset(x,z).  [clausify(3)].
kept:      12 -poset(pl(x,y),z) | poset(y,z).  [clausify(3)].
kept:      13 poset(pl(x,y),z) | -poset(x,z) | -poset(y,z).  [clausify(3)].
kept:      14 -poset(x,mu(y,z)) | poset(x,y).  [clausify(4)].
kept:      15 -poset(x,mu(y,z)) | poset(x,z).  [clausify(4)].
kept:      16 poset(x,mu(y,z)) | -poset(x,y) | -poset(x,z).  [clausify(4)].
           17 mu(x,pl(y,z)) = pl(mu(x,y),mu(x,z)).  [assumption].
kept:      18 pl(mu(x,y),mu(x,z)) = mu(x,pl(y,z)).  [copy(17),flip(a)].
kept:      19 pl(x,mu(y,z)) = mu(pl(x,y),pl(x,z)).  [assumption].
kept:      20 -x = y.  [deny(5)].
           21 -c1 != c3 | c3 != c2.  [deny(5)].
kept:      22 c3 != c2.  [copy(21),unit_del(a,20)].
kept:      23 poset(pl(x,x),y) | -poset(x,y).  [factor(13,b,c)].
kept:      24 poset(x,mu(y,y)) | -poset(x,y).  [factor(16,b,c)].
kept:      25 mu(pl(mu(x,y),x),pl(mu(x,y),z)) = mu(x,pl(y,z)).  [back_rewrite(18),rewrite([19(3)])].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
6 poset(x,x).  [assumption].
7 -poset(x,y) | -poset(y,x) | y = x.  [clausify(1)].
8 -poset(x,y) | -poset(y,z) | poset(x,z).  [clausify(2)].
9 poset(B,x).  [assumption].
10 poset(x,T).  [assumption].
11 -poset(pl(x,y),z) | poset(x,z).  [clausify(3)].
12 -poset(pl(x,y),z) | poset(y,z).  [clausify(3)].
13 poset(pl(x,y),z) | -poset(x,z) | -poset(y,z).  [clausify(3)].
14 -poset(x,mu(y,z)) | poset(x,y).  [clausify(4)].
15 -poset(x,mu(y,z)) | poset(x,z).  [clausify(4)].
16 poset(x,mu(y,z)) | -poset(x,y) | -poset(x,z).  [clausify(4)].
19 pl(x,mu(y,z)) = mu(pl(x,y),pl(x,z)).  [assumption].
20 -x = y.  [deny(5)].
22 c3 != c2.  [copy(21),unit_del(a,20)].
23 poset(pl(x,x),y) | -poset(x,y).  [factor(13,b,c)].
24 poset(x,mu(y,y)) | -poset(x,y).  [factor(16,b,c)].
25 mu(pl(mu(x,y),x),pl(mu(x,y),z)) = mu(x,pl(y,z)).  [back_rewrite(18),rewrite([19(3)])].
end_of_list.

formulas(demodulators).
19 pl(x,mu(y,z)) = mu(pl(x,y),pl(x,z)).  [assumption].
25 mu(pl(mu(x,y),x),pl(mu(x,y),z)) = mu(x,pl(y,z)).  [back_rewrite(18),rewrite([19(3)])].
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

given #1 (I,wt=3): 6 poset(x,x).  [assumption].

given #2 (I,wt=9): 7 -poset(x,y) | -poset(y,x) | y = x.  [clausify(1)].

given #3 (I,wt=9): 8 -poset(x,y) | -poset(y,z) | poset(x,z).  [clausify(2)].

given #4 (I,wt=3): 9 poset(B,x).  [assumption].

given #5 (I,wt=3): 10 poset(x,T).  [assumption].

given #6 (I,wt=8): 11 -poset(pl(x,y),z) | poset(x,z).  [clausify(3)].

given #7 (I,wt=8): 12 -poset(pl(x,y),z) | poset(y,z).  [clausify(3)].

given #8 (I,wt=11): 13 poset(pl(x,y),z) | -poset(x,z) | -poset(y,z).  [clausify(3)].

given #9 (I,wt=8): 14 -poset(x,mu(y,z)) | poset(x,y).  [clausify(4)].

given #10 (I,wt=8): 15 -poset(x,mu(y,z)) | poset(x,z).  [clausify(4)].

given #11 (I,wt=11): 16 poset(x,mu(y,z)) | -poset(x,y) | -poset(x,z).  [clausify(4)].

given #12 (I,wt=13): 19 pl(x,mu(y,z)) = mu(pl(x,y),pl(x,z)).  [assumption].

given #13 (I,wt=4): 20 -x = y.  [deny(5)].

============================== PROOF =================================

% Proof 1 at 0.01 (+ 0.01) seconds.
% Length of proof is 6.
% Level of proof is 3.
% Maximum clause weight is 4.000.
% Given clauses 13.

5 (all x all y y = -x) -> (all z (z = -x <-> z = y)) # label(non_clause) # label(goal).  [goal].
20 -x = y.  [deny(5)].
21 -c1 != c3 | c3 != c2.  [deny(5)].
22 c3 != c2.  [copy(21),unit_del(a,20)].
51 x = y.  [para(20(a,1),20(a,1))].
52 $F.  [resolve(51,a,22,a)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=13. Generated=72. Kept=44. proofs=1.
Usable=13. Sos=22. Demods=2. Limbo=7, Disabled=17. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=28. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=3 (0 lex), Back_demodulated=1. Back_unit_deleted=0.
Demod_attempts=290. Demod_rewrites=12.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=32. Nonunit_bsub_feature_tests=72.
Megabytes=0.10.
User_CPU=0.01, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 88339 exit (max_proofs) Mon Nov 30 12:42:50 2020
